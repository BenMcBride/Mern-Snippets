{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "server.js": {
    "prefix": "mern-server.js",
      "body": [
        "// use express to create a web API",
        "const express = require('express');",
        "const cors = require('cors');",
        "// create an instance of express and store it in the variable 'app'",
        "const app = express();",
        "require('dotenv').config();",
        "const port = process.env.PORT;",
        "// Immediately execute the import mongoose.config.js function",
        "require('./server/config/mongoose.config')(db_name);",
        "app.use(cors()); // this allows the express application (backend) to share information and resources with the react app client (frontend)",
        "app.use(express.json()); // allows the application to read JSON",
        "app.use(express.urlencoded({ extended: true })); // allows the application to extract form information",
        "// you can write it like this too --> app.use(express.json(), express.urlencoded({extended:true}), cors());",
        "app.use(express.static('images')) // tell the server where to upload images to",
        "// this routes import should be below the 'app.use() commands above'",
        "require('./server/routes/${1:example}.routes')(app) // currying: passing the app object to the routes so the routes can do methods --> 'app.get, app.put, app.post, etc;'",
        "",
        "app.listen(port, () => console.log(`Listening on port: ${port}`)); // app listening for requests to respond to at a certain port --> 8000"
      ],
        "description": "server.js"
  },
  "Ciso server.js": {
    "prefix": "mern-ciso-server.js",
      "body": [
        "import express from 'express';",
        "import dotenv from 'dotenv';",
        "import dbConnect from './config/mongoose-config.js'",
        "",
        "const app - express();",
        "dotenv.config();",
        "",
        "const PORT = process.env.PORT;",
        "",
        "async function serverStart() {",
        "  dbConnect();",
        "  app.listen(PORT,() => console.log(`Listening on port: ${PORT}`)",
        "}",
        "",
        "serverStart()"
      ],
        "description": "server.js"
  },
  ".env": {
    "prefix": "mern-env",
      "body": [
        "PORT=8000",
        "DB_NAME=${1:example}",
        "DB_USERNAME=${2:themonsterhidingunderyourbed}",
        "DB_PASSWORD=${3:gijoes}",
        "",
        "// mongodb+srv://${2:themonsterhidingunderyourbed}:${gijoes}@cluster0.asrdx5m.mongodb.net/${1:example}?retryWrites=true&w=majority"
      ],
        "description": "server.js"
  },
  "cisos mongoose.config.js boilerplate": {
    "prefix": "mern-ciso-config-mongoose",
      "body": [
        "import {connect} from \"mongoose\";",
        "import dotenv from 'dotenv';",
        "dotenv.confit();",
        "",
        "const DB_NAME = process.env.DB_NAME;",
        "const DB_USERNAME = process.env.DB_USERNAME;",
        "const DB_PASSWORD = process.env.DB_PASSWORD;",
        "const DB_URI = `mongodb+srv://${DB_USERNAME}:${DB_PASSWORD}@cluster0.asrdx5m.mongodb.net/${dbName}?retryWrites=true&w=majority`;",
        "",
        "async function dbConnect() {",
        "  try {",
        "    await connect(DB_URI, { retryWrites: true });",
        "    console.log('Connected to DB')",
        "  } catch (err) {",
        "    console.log('DB connection error')",
        "  }",
        "}",
        "export default dbConnect;",
      ],
        "description": "mongoose.config.js boilerplate"
  },
  "mongoose.config.js boilerplate": {
    "prefix": "mern-config-mongoose",
      "body": [
        "const mongoose = require('mongoose');",
        "const dbName = process.env.DB_NAME;",
        "const username = process.env.DB_USERNAME;",
        "const pw = process.env.DB_PASSWORD;",
        "const uri = `mongodb+srv://${username}:${pw}@cluster0.asrdx5m.mongodb.net/${dbName}?retryWrites=true&w=majority`;",
        "mongoose.connect(uri, {",
        "    useNewUrlParser: true,",
        "    useUnifiedTopology: true,",
        "})",
        "    .then(() => console.log(\"Established a connection to the database\"))",
        "    .catch(err => console.log(\"Something went wrong when connecting to the database\", err));"
      ],
        "description": "mongoose.config.js boilerplate"
  },
  "schema/model with user validations": {
    "prefix": "mern-user-schema-validations",
      "body": [
        "const mongoose = require('mongoose');",
        "const UserSchema = new mongoose.Schema(",
        "  {",
        "    firstName: {",
        "      type: String,",
        "      required: [true, \"First name is required.\"],",
        "      minlength: [2, \"First name must be at least 2 characters long.\"],",
        "      validate: {",
        "        validator: function (firstName) {",
        "          const re = /^[a-zA-Z-,.]+(\\s{0,1}[a-zA-Z-,. ])*$/;",
        "          return re.test(firstName);",
        "        },",
        "        message: props => `${props.value} is not a valid name.`",
        "      }",
        "    },",
        "    lastName: {",
        "      type: String,",
        "      required: [true, \"Last name is required.\"],",
        "      minlength: [2, \"Last name must be at least 2 characters long.\"],",
        "      maxlength: [20, \"Last name cannot be longer than 20 characters.\"],",
        "      validate: {",
        "        validator: function (lastName) {",
        "          const re = /^[a-zA-Z-,.]+(\\s{0,1}[a-zA-Z-,. ])*$/;",
        "          return re.test(lastName);",
        "        },",
        "        message: props => `${props.value} is not a valid name.`",
        "      }",
        "    },",
        "    age: {",
        "      type: Number,",
        "      min: [18, \"You must be at least 18 or older to register.\"],",
        "      // max: [150, \"You must be at most 149 years old to register\"]",
        "    },",
        "    email: {",
        "      type: String,",
        "      required: [true, \"Email address is required.\"],",
        "      validate: {",
        "        validator: function (email) {",
        "          const re = /^(([^<>()[\\]\\.,;:\\s@\"]+(\\.[^<>()[\\]\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;",
        "          return re.test(email);",
        "        },",
        "        message: props => `${props.value} is not a valid email address.`",
        "      }",
        "    },",
        "    password: {",
        "      type: String,",
        "      required: [true, \"Password is required\"],",
        "      validate: {",
        "        validator: function (password) {",
        "          const re = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%\\^&\\*])(?=.{8,})\");",
        "          return re.test(password);",
        "        },",
        "        message: \"Please enter a valid password. Must be at least 8 characters long, contain at least one uppercase and one lowercase character, one number, and one special character.\"",
        "      }",
        "    },",
        "    phone: {",
        "      type: String,",
        "      required: [true, \"Phone number is required.\"],",
        "      validate: {",
        "        validator: function (v) {",
        "          return /\\d{3}-\\d{3}-\\d{4}/.test(v);",
        "        },",
        "        message: props => `${props.value} is not a valid phone number.`",
        "      },",
        "    }",
        "  },",
        "  { timestamps: true }",
        ");",
        "",
        "const ${1:example}Schema = new mongoose.Schema({",
        "  ${2:example}: String,",
        "  ${3:example}: Number,",
        "  ${4:example}: Date,",
        "  picURL: String,",
        "  photo: String ",
        "}, { timestamps: true });",
        "",
        "module.exports.User = mongoose.model('User', UserSchema);",
        "// Or you can export like this:",
        "// const User = mongoose.model('${1:example}', UserSchema);",
        "// module.exports = ${1:example};",
        ""
      ],
        "description": "schema/model with user validations"
  },
  "schema/model with validations": {
    "prefix": "mern-simple-schema-validations",
      "body": [
        "const mongoose = require('mongoose');",
        "const ${1:example}Schema = new mongoose.Schema({",
        "  ${2:example}: {",
        "    type: String,",
        "    required: [true, 'Please enter Title'],",
        "    minLength: [2, 'Title must be at least 2 characters']",
        "  },",
        "  ${3:example}: {",
        "    type: Number,",
        "    required: [true, 'Please enter Price'],",
        "    min: [0.01, 'Price must be at least 0.01']",
        "  },",
        "  ${4:example}: {",
        "    type: String,",
        "    required: [true, 'Please enter Description'],",
        "    minLength: [5, 'Description must be at least 5 characters']",
        "  }",
        "}, { timestamps: true });",
        "module.exports.${1:example} = mongoose.model('${1:example}', ${1:example}Schema);"
      ],
        "description": "schema/model with simple validations"
  },
  "controller CRUD": {
    "prefix": "mern-crud-controller",
      "body": [
        "const ${1:example} = require('../models/${2:example}.model');",
        "",
        "module.exports.index = (req, res) => {",
        "  res.json({",
        "    message: \"Index from Controller\"",
        "  });",
        "};",
        "// --------------- CREATE ---------------- //",
        "module.exports.createNew${1:example} = (req, res) => {",
        "  console.log(\"REQ.FILE IS THIS --->\", req.file)",
        "  const data = {",
        "    ...req.body,",
        "    photo: req.file.filename",
        "  }",
        "  ${1:example}.create(data)",
        "    .then(new${1:example} => res.status(201).json(new${1:example}))",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// ------------ SIMPLE CREATE ------------ //",
        "module.exports.create${1:example} = (req, res) => {",
        "  ${1:example}.create(req.body)",
        "    .then(new${1:example} => res.status(201).json(new${1:example}))",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// ------------ RETRIEVE ALL ------------- //",
        "module.exports.find${1:example}sAll = (req, res) => {",
        "  ${1:example}.find()",
        "    .then(all${1:example}s => res.status(200).json(all${1:example}s))",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// ------------ RETRIEVE ONE ------------- //",
        "module.exports.find${1:example} = (req, res) => {",
        "  ${1:example}.findById(req.params.id)",
        "    .then(one${1:example} => {res.status(200).json({ results: one${1:example} })})",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// ---------- RETRIEVE RANDOM ----------- //",
        "module.exports.findRandom${1:example} = (req, res) => {",
        "  const getRandomInt = (max) => {",
        "    return Math.floor(Math.random() * max);",
        "  }",
        "  ${1:example}.find()",
        "    .then(all${1:example}s => {",
        "      const randomIndex = getRandomInt(all${1:example}s.length)",
        "      res.status(200).json({ results: all${1:example}s[randomIndex] })",
        "    })",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// ------------ SIMPLE RANDOM ------------ //",
        "module.exports.findRandom${1:example} = (req, res) => {",
        "  ${1:example}.findRandom({ _id: req.params.id })",
        "    .then(all${1:example}s => {",
        "      let oneRandom${1:example} = all${1:example}s[Math.floor(Math.random() * all${1:example}s.length)]",
        "      res.status(200).json({ results: oneRandom${1:example} })",
        "    })",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// --------------- UPDATE ---------------- //",
        "module.exports.update${1:example} = (req, res) => {",
        "  ${1:example}.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })",
        "    .then(updated${1:example} => {res.status(200).json(updated${1:example})})",
        "    .catch(err => res.status(400).json(err));",
        "};",
        "// --------------- DELETE ---------------- //",
        "module.exports.delete${1:example} = (req, res) => {",
        "  ${1:example}.findByIdAndDelete(req.params.id)",
        "    .then(result => res.status(200).json(result))",
        "    .catch(err => res.status(400).json(err));",
        "};"
      ],
        "description": "controller CRUD"
  },
  "routes": {
    "prefix": "mern-routes",
      "body": [
        "const ${1:example}Controller = require('../controllers/${2:example}.controller');",
        "",
        "// these are the routes that go to their respective functions in the controller",
        "// best practice to put the routes with specific parameters (like _id) at the bottom and everything else at the top",
        "module.exports = (app) => {",
        "  app.get('/', ${1:example}Controller.index);",
        "  app.get('/api/${2:example}s/', ${1:example}Controller.findAll${1:example}s);",
        "  app.post('/api/${2:example}/new', ${1:example}Controller.createNew${1:example});",
        "  app.get('/api/${2:example}/random', ${1:example}Controller.findRandom${1:example});",
        "  app.get('/api/${2:example}/:id', ${1:example}Controller.findOne${1:example});",
        "  app.put('/api/${2:example}/update/:id', ${1:example}Controller.updateExisting${1:example});",
        "  app.delete('/api/${2:example}/delete/:id', ${1:example}Controller.deleteOne${1:example});",
        "}",
        ""
      ],
        "description": "routes"
  }
}